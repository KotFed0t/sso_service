// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IOAuthService is an autogenerated mock type for the IOAuthService type
type IOAuthService struct {
	mock.Mock
}

// GetRedirectURLAndState provides a mock function with given fields: ctx, authProvider
func (_m *IOAuthService) GetRedirectURLAndState(ctx context.Context, authProvider string) (string, string, error) {
	ret := _m.Called(ctx, authProvider)

	if len(ret) == 0 {
		panic("no return value specified for GetRedirectURLAndState")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, error)); ok {
		return rf(ctx, authProvider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, authProvider)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, authProvider)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, authProvider)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HandleCallbackAndLoginUser provides a mock function with given fields: ctx, authProviderName, callbackCode, clientIp
func (_m *IOAuthService) HandleCallbackAndLoginUser(ctx context.Context, authProviderName string, callbackCode string, clientIp string) (string, string, error) {
	ret := _m.Called(ctx, authProviderName, callbackCode, clientIp)

	if len(ret) == 0 {
		panic("no return value specified for HandleCallbackAndLoginUser")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, string, error)); ok {
		return rf(ctx, authProviderName, callbackCode, clientIp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, authProviderName, callbackCode, clientIp)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) string); ok {
		r1 = rf(ctx, authProviderName, callbackCode, clientIp)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, authProviderName, callbackCode, clientIp)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIOAuthService creates a new instance of IOAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOAuthService {
	mock := &IOAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
