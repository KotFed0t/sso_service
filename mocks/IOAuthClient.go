// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	oauth2 "golang.org/x/oauth2"
)

// IOAuthClient is an autogenerated mock type for the IOAuthClient type
type IOAuthClient struct {
	mock.Mock
}

// Exchange provides a mock function with given fields: ctx, code, providerConfig
func (_m *IOAuthClient) Exchange(ctx context.Context, code string, providerConfig *oauth2.Config) (*oauth2.Token, error) {
	ret := _m.Called(ctx, code, providerConfig)

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *oauth2.Config) (*oauth2.Token, error)); ok {
		return rf(ctx, code, providerConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *oauth2.Config) *oauth2.Token); ok {
		r0 = rf(ctx, code, providerConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *oauth2.Config) error); ok {
		r1 = rf(ctx, code, providerConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: ctx, userInfoUrl, accessToken
func (_m *IOAuthClient) GetUserInfo(ctx context.Context, userInfoUrl string, accessToken string) ([]byte, error) {
	ret := _m.Called(ctx, userInfoUrl, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, userInfoUrl, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, userInfoUrl, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userInfoUrl, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOAuthClient creates a new instance of IOAuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOAuthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOAuthClient {
	mock := &IOAuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
