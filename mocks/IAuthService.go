// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// ConfirmEmailAndFinishRegistration provides a mock function with given fields: ctx, email, code, clientIp
func (_m *IAuthService) ConfirmEmailAndFinishRegistration(ctx context.Context, email string, code int, clientIp string) (string, string, error) {
	ret := _m.Called(ctx, email, code, clientIp)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmEmailAndFinishRegistration")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) (string, string, error)); ok {
		return rf(ctx, email, code, clientIp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) string); ok {
		r0 = rf(ctx, email, code, clientIp)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, string) string); ok {
		r1 = rf(ctx, email, code, clientIp)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, string) error); ok {
		r2 = rf(ctx, email, code, clientIp)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FirstRegistrationPhase provides a mock function with given fields: ctx, email, password
func (_m *IAuthService) FirstRegistrationPhase(ctx context.Context, email string, password string) error {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for FirstRegistrationPhase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoginUser provides a mock function with given fields: ctx, email, password, clientIp
func (_m *IAuthService) LoginUser(ctx context.Context, email string, password string, clientIp string) (string, string, error) {
	ret := _m.Called(ctx, email, password, clientIp)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, string, error)); ok {
		return rf(ctx, email, password, clientIp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, email, password, clientIp)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) string); ok {
		r1 = rf(ctx, email, password, clientIp)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, email, password, clientIp)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Logout provides a mock function with given fields: ctx, refreshToken
func (_m *IAuthService) Logout(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshTokens provides a mock function with given fields: ctx, refreshToken, clientIp
func (_m *IAuthService) RefreshTokens(ctx context.Context, refreshToken string, clientIp string) (string, string, error) {
	ret := _m.Called(ctx, refreshToken, clientIp)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokens")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, string, error)); ok {
		return rf(ctx, refreshToken, clientIp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, refreshToken, clientIp)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, refreshToken, clientIp)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, refreshToken, clientIp)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResetPassword provides a mock function with given fields: ctx, uuid, token, password
func (_m *IAuthService) ResetPassword(ctx context.Context, uuid string, token string, password string) error {
	ret := _m.Called(ctx, uuid, token, password)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, uuid, token, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendResetPasswordLink provides a mock function with given fields: ctx, email
func (_m *IAuthService) SendResetPasswordLink(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SendResetPasswordLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
